---
- name: Backup Teamcity
  hosts: all
  force_handlers: True
  vars:
    teamcity:
      backup_logs: "false"
      backup_name: "TeamCity_Backup.zip"
    timeout:
      retries: 20
      delay: 30
    secrets_file: "secrets.yml"
  tasks:
    - name: Include secrets
      include_vars: "{{ secrets_file }}"
      tags:
        - always
    - name: Backup name
      debug:
        var: teamcity.backup_name
      tags:
        - always
    - block:
      - name: Check Backup Status
        uri:
          url: "{{ teamcity.base_url }}/app/rest/server/backup"
          method: "GET"
          user: "{{ teamcity.username }}"
          password: "{{ teamcity.password }}"
          return_content: yes
        register: "teamcity_backup_status"
        tags:
          - trigger_backup
      - name: Wait for backup to be done
        uri:
          url: "{{ teamcity.base_url }}/app/rest/server/backup"
          method: "GET"
          user: "{{ teamcity.username }}"
          password: "{{ teamcity.password }}"
          return_content: yes
        register: "teamcity_backup_status"
        until: teamcity_backup_status.content == "Idle"
        retries: "{{ timeout.retries }}"
        delay: "{{ timeout.delay }}"
        tags:
          - trigger_backup
      - name: Trigger backup
        when: teamcity_backup_status.content == "Idle"
        uri:
          url: "{{ teamcity.base_url }}/app/rest/server/backup?includeConfigs=true&includeDatabase=true&includeBuildLogs={{ teamcity.backup_logs  }}&fileName={{ teamcity.backup_name }}"
          method: "POST"
          user: "{{ teamcity.username }}"
          password: "{{ teamcity.password }}"
          return_content: yes
        register: "teamcity_backup_request"
        tags:
          - trigger_backup
      - name: Request Status
        debug:
          var: teamcity_backup_request.content
        tags:
          - trigger_backup
      - name: Set backup file name
        set_fact:
          teamcity:
            backup_name: "{{ teamcity_backup_request.content }}"
        tags:
          - trigger_backup
      - name: Wait for backup to be done
        uri:
          url: "{{ teamcity.base_url }}/app/rest/server/backup"
          method: "GET"
          user: "{{ teamcity.username }}"
          password: "{{ teamcity.password }}"
          return_content: yes
        register: "teamcity_backup_status"
        until: teamcity_backup_status.content == "Idle"
        retries: "{{ timeout.retries }}"
        delay: "{{ timeout.delay }}"
        tags:
          - trigger_backup
    - block:
      - name: Get temporary file
        tempfile:
          state: file
          suffix: teamcity
        register: "tempfile"
        tags:
          - upload_backup
      - name: "Download backup {{ teamcity.backup_name }}"
        get_url:
          url: "{{ teamcity.base_url }}/get/file/backup/{{ teamcity.backup_name }}"
          url_username: "{{ teamcity.username }}"
          url_password: "{{ teamcity.password }}"
          dest: "{{ tempfile.path }}"
          force: "yes"
        tags:
          - upload_backup
      - name: "Stat downloaded file"
        stat:
          path: "{{ tempfile.path }}"
        register: downloaded_file
      - debug:
          msg: "{{ teamcity.base_url }}/get/file/backup/{{ teamcity.backup_name }}"
      - name: Print File information
        debug:
          msg: "Downloaded file size: {{ downloaded_file.stat.size }} Bytes"
      # ðŸ˜± Nasty boto bug: https://github.com/boto/boto/issues/2207
      # - name: Upload to S3
      #   s3:
      #     aws_access_key: "{{ aws.access_key }}"
      #     aws_secret_key: "{{ aws.secret_key }}"
      #     bucket: "{{ s3.bucket }}"
      #     encrypt: yes
      #     mode: put
      #     object: "{{ s3.object_prefix }}/{{ teamcity.backup_name }}"
      #     overwrite: "{{ s3.overwrite_mode | default(never) }}"
      #     region: "{{ aws.region }}"
      #     src: "{{ tempfile.path }}"
      #     retries: "{{ s3.retries | default(5) }}"
      #   tags:
      #     - upload_backup
      - name: Upload to S3
        environment:
          AWS_ACCESS_KEY_ID: "{{ aws.access_key }}"
          AWS_SECRET_ACCESS_KEY: "{{ aws.secret_key }}"
          AWS_DEFAULT_REGION: "{{ aws.region }}"
        shell: aws s3 cp "{{ tempfile.path }}" "s3://{{ s3.bucket }}/{{ s3.object_prefix }}{{ teamcity.backup_name }}" --sse
        args:
          chdir: /
        tags:
          - upload_backup
      always:
        - name: Delete Temporary File
          file:
            path: "{{ tempfile.path }}"
            state: absent
          tags:
            - upload_backup
